@model List<ProyectoControlLineaBus.Models.MuestraRutasMapas>
@{
    ViewBag.Title = "Línea";
}
    <head>
        <title class="text-center">Gestor</title>
        <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css"
              integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY="
              crossorigin="" />
        <meta charset="utf-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1, user-scalable=no" />
        <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" crossorigin="" />
        <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css">
        <script src="https://code.jquery.com/jquery-3.2.1.slim.min.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js"></script>
        <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js"></script>
        <link rel="stylesheet" href="~/assets/css/main.css" />
        <noscript><link rel="stylesheet" href="~/assets/css/noscript.css" /></noscript>
        <style>
            .btn-outline-primary,
            .btn-outline-danger,
            .btn-outline-warning,
            .btn-outline-secondary,
            .btn-outline-success,
            .btn-outline-info {
                border-width: 4px;
                font-weight: bold;
                color: white;
            }

            .btn-outline-primary {
                border-color: rgba(0, 123, 255, 0.7);
            }

            .btn-outline-danger {
                border-color: rgba(220, 53, 69, 0.7);
            }

            .btn-outline-info {
                border-color: rgba(23, 162, 184, 0.7);
            }


            .btn-outline-primary:hover {
                background-color: #007bff;
                color: white;
            }

            .btn-outline-danger:hover {
                background-color: #dc3545;
                color: white;
            }

            .btn-outline-info:hover {
                background-color: #17a2b8;
                color: white;
            }

            , .btn-primary, .btn-danger {
                width: 150px;
                font-weight: bold;
            }

            .btn-secondary {
                background-color: #6c757d;
            }

                .btn-secondary:hover {
                    background-color: #5a6268;
                }

            .btn-primary {
                background-color: #007bff;
                border-color: #007bff;
            }

                .btn-primary:hover {
                    background-color: #0069d9;
                    border-color: #0062cc;
                }

            .btn-danger {
                font-weight: bold;
                background-color: #dc3545;
                border-color: #dc3545;
            }

            .btn-primary {
                font-weight: bold;
                background-color: rgba(0, 123, 255, 0.7);
                border-color: rgba(0, 123, 255, 0.7);
            }
            #map-container {
                position: relative; 
                width: 100%;
                height: 400px;
            }

            #map {
                width: 100%;
                height: 100%;
                position: relative;
            }

            #custom-image {
                position: absolute;
                bottom: 0px;
                right: 0px; 
                width: 250px;
                height: 50px;
                z-index: 1000; 
                pointer-events: none; 
            }
        </style>
    </head>
    <div style="margin-top:2%"></div>
    <body>
        <h1 class="text-center">@ViewBag.name</h1>
        <div class="mb-4 mt-4">
            <div class="row mx-auto">
                <div class="col-3 text-left">
                    @if (ViewBag.count > 1)
                    {
                        @: @Html.ActionLink("Gestionar otras líneas", "olvidarCookieLinea", "Line", "", new { @class = "btn btn-outline-info" })
                    }
                </div>
                <div class="col-6">
                    <b>Descripción:</b> Horarios: @ViewBag.description
                    @*<select id="routeSelect" onchange="enfocarRuta()">
                        <option value="0" selected>Selecciona una Ruta...</option>
                        <option value="1">Ruta 1</option>
                        <option value="2">Ruta 2</option>
                    </select>*@
                </div>
                <div class="col-2">
                    <a href="https://youtu.be/XhKnhoe8Frg" target="_blank" class="btn btn-outline-info"> Ver Tutorial</a>
                </div>
            </div>
        </div>

        <div id="map-container">
            <div id="map"></div>
            <img id="custom-image" src="~/images/INDICACIONES1.png"  alt="Icono personalizado" />
        </div>
        <div class="text-center">
            <script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"></script>
            <script src="https://unpkg.com/leaflet-routing-machine@3.2.12/dist/leaflet-routing-machine.js"></script>

            <script>
        var map = L.map('map').setView([-17.3935, -66.1570], 15);

        L.tileLayer('https://api.mapbox.com/styles/v1/mapbox/streets-v11/tiles/{z}/{x}/{y}?access_token=pk.eyJ1IjoiZmVycWl1IiwiYSI6ImNsemxwZ3Y5azA1Y3Yya3BsaHc4Z2M0MDUifQ.6cTA3adpx2Vufg2fZiyeVQ', {
            maxZoom: 19,
            tileSize: 512,
            zoomOffset: -1,
        }).addTo(map);

        var rutas = [];
        var paradas = [];
        var bloqueos = [];
        var marker = null;
        var routeLayers = [];
        var paradasLayers = [];
        var bloqueoLayers = [];


        function agregarRutasYBloqueos() {
            rutas.forEach(function (ruta) {
                var waypointsLatLng = ruta.waypoints.map(function(coord) {
                    return L.latLng(coord[0], coord[1]);
                });

                var routeBorder = L.polyline(waypointsLatLng, { color: 'black', weight: 7, opacity: 1 }).addTo(map);
                var routeLayer = L.polyline(waypointsLatLng, { color: ruta.color, weight: 5, opacity: 0.8 }).addTo(map);

                var startMarker = L.marker(waypointsLatLng[0], { icon: L.divIcon({
                    className: 'custom-start-icon',
                    html: '<div style="background-color: green; width: 30px; height: 30px; border-radius: 50%; border: 2px solid black;"></div>',
                    iconSize: [30, 30],
                    iconAnchor: [15, 15]
                }) }).addTo(map);

                var endMarker = L.marker(waypointsLatLng[waypointsLatLng.length - 1], { icon: L.divIcon({
                    className: 'custom-end-icon',
                    html: '<div style="background-color: red; width: 30px; height: 30px; border-radius: 50%; border: 2px solid black;"></div>',
                    iconSize: [30, 30],
                    iconAnchor: [15, 15]
                }) }).addTo(map);

                routeLayers.push({ border: routeBorder, layer: routeLayer, startMarker: startMarker, endMarker: endMarker });
            });

            paradas.forEach(function (parada) {
                var marker = L.marker(parada.latLng).addTo(map).bindPopup(parada.descripcion);
                paradasLayers.push(marker);
            });

            bloqueos.forEach(function (bloqueo) {
                var bloqueoLayer = L.polyline(bloqueo.coords, {
                    color: 'red',
                    weight: 5,
                    opacity: 0.8
                }).addTo(map);
                bloqueoLayers.push(bloqueoLayer);
            });

            ajustarAMapaCompleto();  
        }


        function ajustarAMapaCompleto() {
            var allLayers = routeLayers.map(function (r) { return r.layer; }).concat(bloqueoLayers);
            var group = new L.featureGroup(allLayers);
            map.fitBounds(group.getBounds());  
        }

        document.addEventListener('DOMContentLoaded', function () {
            @foreach (var item in Model)
            {
                @:var waypoints = [];
                @:var bloqueoCoords = [];

                foreach (var route in item.ListRutasMostrar)
                {
                    @:waypoints.push([@route.latitud, @route.longitud]);
                }

                @:rutas.push({
                @:    nombre: 'Ruta @item.NumeroRuta',
                @:    waypoints: waypoints,
                @:    color: '#007bff'
                @:});

                foreach (var bloqueo in item.ListBloqueosMostrar)
                {
                    @:bloqueoCoords = [];
                    foreach (var bloqueoRoute in bloqueo.ListRutasMostrar)
                    {
                        @:bloqueoCoords.push([@bloqueoRoute.latitud, @bloqueoRoute.longitud]);
                    }
                    @:bloqueos.push({
                    @:    coords: bloqueoCoords,
                    @:    numeroRuta: @item.NumeroRuta,
                    @:    color: 'red'
                    @:});
                }

                foreach (var parada in item.ListParadasMostrar.Where(x => x.status == 1))
                {
                    @:paradas.push({
                    @:    latLng: [@parada.latitud, @parada.longitud],
                    @:    descripcion: '@parada.description',
                    @:    numeroRuta: @item.NumeroRuta
                    @:});
                }
            }

            agregarRutasYBloqueos();  
        });

        function enfocarRuta() {
            var selectedRouteNumber = parseInt(document.getElementById("routeSelect").value);

            if (marker) {
                map.removeLayer(marker);
            }

            if (selectedRouteNumber === 0) {
                routeLayers.forEach(function (route) {
                    map.addLayer(route.border);
                    map.addLayer(route.layer);
                    map.addLayer(route.startMarker);
                    map.addLayer(route.endMarker);
                });
                paradasLayers.forEach(function (marker) {
                    marker.addTo(map);
                });

                bloqueoLayers.forEach(function (bloqueoLayer) {
                    map.addLayer(bloqueoLayer);
                });

                ajustarAMapaCompleto();  
                return;
            }

            bloqueoLayers.forEach(function (bloqueoLayer) {
                map.removeLayer(bloqueoLayer);
            });
            bloqueoLayers = [];

            routeLayers.forEach(function (route, index) {
                if (index + 1 === selectedRouteNumber) {
                    map.addLayer(route.border);
                    map.addLayer(route.layer);
                    map.addLayer(route.startMarker);
                    map.addLayer(route.endMarker);
                    map.fitBounds(route.layer.getBounds());
                } else {
                    map.removeLayer(route.layer);
                    map.removeLayer(route.border);
                    map.removeLayer(route.startMarker);
                    map.removeLayer(route.endMarker);
                }
            });

            paradasLayers.forEach(function (marker, index) {
                var parada = paradas[index];
                if (parada.numeroRuta === selectedRouteNumber) {
                    marker.addTo(map);
                } else {
                    map.removeLayer(marker);
                }
            });

            bloqueos.forEach(function (bloqueo) {
                if (bloqueo.numeroRuta === selectedRouteNumber) {
                    var bloqueoLayer = L.polyline(bloqueo.coords, {
                        color: 'red',
                        weight: 5,
                        opacity: 0.8
                    }).addTo(map);
                    bloqueoLayers.push(bloqueoLayer);
                }
            });
        }
            var userMarker = null;

            if (navigator.geolocation) {
                navigator.geolocation.watchPosition(function (position) {
                    var lat = position.coords.latitude;
                    var lng = position.coords.longitude;

                    if (userMarker) {
                        userMarker.setLatLng([lat, lng]);
                    } else {
                        userMarker = L.circleMarker([lat, lng], {
                            color: 'black',
                            fillColor: 'blue',
                            fillOpacity: 0.8,
                            radius: 10
                        }).addTo(map).bindPopup("Tú estás aquí");
                    }
                }, function (error) {
                    console.error("Error al obtener la ubicación: " + error.message);
                }, {
                    enableHighAccuracy: true,
                    maximumAge: 10000,
                    timeout: 5000
                });
            } else {
                console.error("Geolocalización no es soportada por este navegador.");
                }

            </script>
        </div>
        <div class="mt-4">
            <div class="row mx-auto">
                <div class="col-3">
                    @Html.ActionLink("Editar Información", "Edit", "Line", "", new { @class = "btn btn-danger" })
                </div>
                <div class="col-3">
                    @Html.ActionLink("Ver Empleados", "Index", "Employee", "", new { @class = "btn btn-danger" })
                </div>
                <div class="col-3">
                    @Html.ActionLink("Administrar Rutas", "ListRoutes", "Route", "", new { @class = "btn btn-danger" })
                </div>
                <div class="col-3">
                    @Html.ActionLink("Top choferes", "ReportRankingChoferes", "NewReport", "", new { @class = "btn btn-danger" })
                </div>
            </div>
        </div>
    </body>

