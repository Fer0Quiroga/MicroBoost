@model ProyectoControlLineaBus.Models.MuestraRutasMapas
@using Newtonsoft.Json
<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1, user-scalable=no" />
    <title>Registrar Nueva Ubicacion</title>

    <!-- CSS de Leaflet -->
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" crossorigin="" />

    <!-- CSS de Bootstrap -->
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css">

    <!-- JS de Bootstrap y jQuery -->
    <script src="https://code.jquery.com/jquery-3.2.1.slim.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js"></script>

    <!-- CSS personalizado -->
    <link rel="stylesheet" href="~/assets/css/main.css" />
    <noscript><link rel="stylesheet" href="~/assets/css/noscript.css" /></noscript>

    <style>
        .btn-outline-primary,
        .btn-outline-danger,
        .btn-outline-warning,
        .btn-outline-secondary,
        .btn-outline-success,
        .btn-outline-info {
            border-width: 4px;
            font-weight: bold;
            color: white;
        }

        .btn-outline-primary {
            border-color: rgba(0, 123, 255, 0.7);
        }

        .btn-outline-danger {
            border-color: rgba(220, 53, 69, 0.7);
        }

        .btn-outline-info {
            border-color: rgba(23, 162, 184, 0.7);
        }


        .btn-outline-primary:hover {
            background-color: #007bff;
            color: white;
        }

        .btn-outline-danger:hover {
            background-color: #dc3545;
            color: white;
        }

        .btn-outline-info:hover {
            background-color: #17a2b8;
            color: white;
        }

        , .btn-primary, .btn-danger {
            width: 150px;
            font-weight: bold;
        }

        .btn-secondary {
            background-color: #6c757d;
        }

            .btn-secondary:hover {
                background-color: #5a6268;
            }

        .btn-primary {
            background-color: #007bff;
            border-color: #007bff;
        }

            .btn-primary:hover {
                background-color: #0069d9;
                border-color: #0062cc;
            }

        .btn-danger {
            
            font-weight: bold;
            background-color: #dc3545;
            border-color: #dc3545;
        }
        .route-link {
            cursor: pointer;
            color: #007bff;
            text-decoration: underline;
            margin-right: 20px;
        }

            .route-link:hover {
                color: #0056b3;
            }

        .ruta-descripcion, .parada-descripcion {
            display: none;
        }

        #streetNames {
            margin-top: 10px;
            margin-left: 20px;
        }

        .row {
            display: flex;
        }

        #map {
            flex: 1;
        }

        #streetNames {
            flex: 0 0 40%;
        }
    </style>
</head>
<body>

    <h2 class="text-center">Registrar ubicación en Ruta @ViewBag.numTypeRoute</h2>
    <div class="row">
        <div class="col-md-1 mb-2">
            @Html.ActionLink("Volver", "Index", "Route", new { numTypeRoute= ViewBag.numTypeRoute }, new { @class = "btn btn-outline-primary" })
        </div>
    </div>
    <div style="font-size:inherit; font-weight:bold; margin-top:2%">Haga click en el mapa para marcar una nueva ubicación</div>
    <div class="row">
        <div id="map" style="height: 500px;"></div>

        <div id="streetNames">
            <h3>Nueva ubicación:</h3>

            <ul id="streetList"></ul>
            <form id="ubicacionesForm" action="@Url.Action("IndexUbicacionesRuta", "Route")" method="post">
                <input type="hidden" id="ubicaciones" name="ubicaciones" />
                <input type="hidden" id="numTypeRoute" name="numTypeRoute" value="@ViewBag.numTypeRoute" />
                <button type="button" id="enviarUbicacionesBtn" class="btn btn-primary">Registrar ubicación</button>
            </form>
            @Html.ActionLink("Eliminar última ubicación", "RevertDelete", "Route", new { numTypeRoute = ViewBag.numTypeRoute }, new { @class = "btn btn-danger" })
        </div>
    </div>

    <script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"></script>

    <script>
    // Inicializar el mapa centrado en Cochabamba
    var map = L.map('map').setView([-17.3935, -66.1570], 15);

    // Agregar el tile layer de Mapbox al mapa
    L.tileLayer('https://api.mapbox.com/styles/v1/mapbox/streets-v11/tiles/{z}/{x}/{y}?access_token=pk.eyJ1IjoiZmVycWl1IiwiYSI6ImNsemxwZ3Y5azA1Y3Yya3BsaHc4Z2M0MDUifQ.6cTA3adpx2Vufg2fZiyeVQ', {
        maxZoom: 19,
        tileSize: 512,
        zoomOffset: -1,
    }).addTo(map);

    var rutas = @Html.Raw(JsonConvert.SerializeObject(ViewBag.RouteChunks));
    var startIcon = L.divIcon({
        className: 'custom-start-icon',
        html: '<div style="background-color: green; width: 30px; height: 30px; border-radius: 50%; border: 2px solid black;"></div>',
        iconSize: [30, 30],
        iconAnchor: [15, 15]
    });

    var endIcon = L.divIcon({
        className: 'custom-end-icon',
        html: '<div style="background-color: red; width: 30px; height: 30px; border-radius: 50%; border: 2px solid black;"></div>',
        iconSize: [30, 30],
        iconAnchor: [15, 15]
    });

    var waypointsLatLng = rutas.map(function(coord) {
        return L.latLng(parseFloat(coord.latitud.toFixed(7)), parseFloat(coord.longitud.toFixed(7)));
    });

    // Dibujar la línea de la ruta con borde negro y color azul
        // Dibujar la línea de la ruta
        var routeLayer = L.polyline(waypointsLatLng, {
            color: 'blue',        // Color azul para la línea principal
            weight: 5,            // Grosor de la línea
            opacity: 0.6,         // Opacidad de la línea principal (semi-transparente)
            smoothFactor: 1
        }).addTo(map);

        // Añadir un borde negro para darle más definición
        L.polyline(waypointsLatLng, {
            color: 'black',       // Color del borde
            weight: 6,            // Grosor del borde
            opacity: 0.5,         // Opacidad del borde (casi opaco)
            smoothFactor: 1
        }).addTo(map);


    // Colocar marcadores en el inicio y fin de la ruta
    if (waypointsLatLng.length > 0) {
        L.marker(waypointsLatLng[waypointsLatLng.length - 1], { icon: endIcon }).addTo(map).bindPopup("Fin");
        L.marker(waypointsLatLng[0], { icon: startIcon }).addTo(map).bindPopup("Inicio");

        // Ajustar la vista del mapa al último punto de la ruta
        map.setView(waypointsLatLng[waypointsLatLng.length - 1], 17);
    }

    // Variables para el marcador y la línea temporal
    var endPointMarker = null;
    var tempLine = null;

    // Obtener y mostrar nombres de calles al hacer clic en el mapa
    map.on('click', function (e) {
        var endLatLng = e.latlng;
        const streetList = document.getElementById('streetList');
        streetList.innerHTML = ''; // Limpiar la lista de calles

        // Eliminar la línea y el marcador anteriores si existen
        if (endPointMarker) {
            map.removeLayer(endPointMarker);
        }
        if (tempLine) {
            map.removeLayer(tempLine);
        }

        // Crear un marcador en la nueva ubicación seleccionada
        endPointMarker = L.marker(endLatLng, { icon: endIcon }).addTo(map);

        // Trazar una línea desde el último punto de la ruta hasta el nuevo punto
        tempLine = L.polyline([waypointsLatLng[waypointsLatLng.length - 1], endLatLng], {
            color: 'blue',
            weight: 2,
            opacity: 0.8,
            smoothFactor: 1
        }).addTo(map);

        // Hacer la solicitud a la API de Geocodificación de Mapbox
        fetch(`https://api.mapbox.com/geocoding/v5/mapbox.places/${endLatLng.lng},${endLatLng.lat}.json?types=address&access_token=pk.eyJ1IjoiZmVycWl1IiwiYSI6ImNsemxwZ3Y5azA1Y3Yya3BsaHc4Z2M0MDUifQ.6cTA3adpx2Vufg2fZiyeVQ`)
            .then(response => response.json())
            .then(data => {
                if (data.features && data.features.length > 0) {
                    const streetName = data.features[0].place_name.split(',')[0];

                    // Mostrar el nombre de la calle en la lista
                    const li = document.createElement('li');
                    li.textContent = `Nombre de calle: ${streetName}`;
                    streetList.appendChild(li);

                    // Almacenar la información para enviar al servidor
                    let ubicacionesArray = [];
                    ubicacionesArray.push(`${streetName}/${endLatLng.lat.toFixed(7)}/${endLatLng.lng.toFixed(7)}`);

                    // Enviar la ubicación al hacer clic en el botón
                    document.getElementById('enviarUbicacionesBtn').addEventListener('click', function (event) {
                        event.preventDefault(); // Previene el envío inmediato del formulario

                        const ubicacionesData = JSON.stringify(ubicacionesArray);

                        // Imprimir en la consola los datos que se enviarán
                        console.log("Datos que se van a enviar:", ubicacionesData);

                        // Establecer el valor del input hidden con los datos
                        document.getElementById('ubicaciones').value = ubicacionesData;
                        document.getElementById('ubicacionesForm').submit();
                    });
                } else {
                    console.log("No se encontró ninguna calle para la ubicación seleccionada.");
                }
            });
    });
    </script>
</body>
</html>
